Index: GrpcService/Program.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using GrpcService;\r\nusing GrpcService.Extensions;\r\nusing GrpcService.Services;\r\nusing Microsoft.EntityFrameworkCore;\r\n\r\nvar builder = WebApplication.CreateBuilder(args);\r\n\r\nbuilder.AddServiceDefaults();\r\n\r\n// Add services to the container.\r\nbuilder.SetupApp();\r\n\r\nvar app = builder.Build();\r\n\r\napp.UseHttpLogging();\r\napp.UseExceptionHandler();\r\n\r\napp.MapDefaultEndpoints();\r\n\r\napp.UseAuthentication();\r\napp.UseAuthorization();\r\n\r\napp.MapGrpcService<RemindService>();\r\napp.MapGrpcService<RemindGroupService>();\r\napp.MapGrpcService<HealthCheckService>();\r\n\r\nif (app.Environment.IsDevelopment()) app.MapGrpcReflectionService();\r\nusing (var scope = app.Services.CreateScope())\r\nawait using (var dbCtx = scope.ServiceProvider.GetRequiredService<AppDbContext>())\r\n{\r\n    var strategy = dbCtx.Database.CreateExecutionStrategy();\r\n    await strategy.ExecuteAsync(() => dbCtx.Database.EnsureCreatedAsync());\r\n}\r\n\r\napp.Run();\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/GrpcService/Program.cs b/GrpcService/Program.cs
--- a/GrpcService/Program.cs	(revision 7a625454d1e5a6b2a59ded9561130df41fb81b2e)
+++ b/GrpcService/Program.cs	(date 1723539550548)
@@ -23,6 +23,7 @@
 app.MapGrpcService<RemindService>();
 app.MapGrpcService<RemindGroupService>();
 app.MapGrpcService<HealthCheckService>();
+app.MapGrpcService<RemindTemplateService>();
 
 if (app.Environment.IsDevelopment()) app.MapGrpcReflectionService();
 using (var scope = app.Services.CreateScope())
Index: GrpcService/AppDBContext.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using GrpcService.Models.Remind;\r\nusing Microsoft.EntityFrameworkCore;\r\n\r\nnamespace GrpcService;\r\n\r\npublic class AppDbContext(DbContextOptions<AppDbContext> opt) : DbContext(opt)\r\n{\r\n    public DbSet<RemindModel> Reminds { get; set; }\r\n    public DbSet<RemindGroupModel> RemindGroups { get; set; }\r\n\r\n    protected override void OnModelCreating(ModelBuilder modelBuilder)\r\n    {\r\n        // 全てのエンティティに対してCreatedAtとUpdatedAtがあれば自動で設定する\r\n        foreach (var entityType in modelBuilder.Model.GetEntityTypes())\r\n        {\r\n            entityType.FindProperty(\"UpdatedAt\")?.SetDefaultValueSql(\"CURRENT_TIMESTAMP\");\r\n            entityType.FindProperty(\"CreatedAt\")?.SetDefaultValueSql(\"CURRENT_TIMESTAMP\");\r\n            modelBuilder.Entity(entityType.Name).Property(\"UpdatedAt\").ValueGeneratedOnUpdate();\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/GrpcService/AppDBContext.cs b/GrpcService/AppDBContext.cs
--- a/GrpcService/AppDBContext.cs	(revision 7a625454d1e5a6b2a59ded9561130df41fb81b2e)
+++ b/GrpcService/AppDBContext.cs	(date 1723603040486)
@@ -1,4 +1,5 @@
 using GrpcService.Models.Remind;
+using GrpcService.Models.RemindTemplate;
 using Microsoft.EntityFrameworkCore;
 
 namespace GrpcService;
@@ -8,6 +9,8 @@
     public DbSet<RemindModel> Reminds { get; set; }
     public DbSet<RemindGroupModel> RemindGroups { get; set; }
 
+    public DbSet<RemindTemplateModel> RemindTemplates { get; set; }
+
     protected override void OnModelCreating(ModelBuilder modelBuilder)
     {
         // 全てのエンティティに対してCreatedAtとUpdatedAtがあれば自動で設定する
Index: GrpcService/Models/RemindTemplate/RemindTemplateModel.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/GrpcService/Models/RemindTemplate/RemindTemplateModel.cs b/GrpcService/Models/RemindTemplate/RemindTemplateModel.cs
new file mode 100644
--- /dev/null	(date 1723539550559)
+++ b/GrpcService/Models/RemindTemplate/RemindTemplateModel.cs	(date 1723539550559)
@@ -0,0 +1,27 @@
+using System.ComponentModel.DataAnnotations;
+using System.ComponentModel.DataAnnotations.Schema;
+
+namespace GrpcService.Models.RemindTemplate;
+
+public class RemindTemplateModel
+{
+    [Key]
+    [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
+    public Guid Id { get; init; }
+
+    [Required]
+    [MinLength(1)]
+    [MaxLength(100)]
+    public required string Title { get; set; }
+
+    [MaxLength(400)] public string? Description { get; set; }
+
+    [Required]
+    [MinLength(1)]
+    [MaxLength(32)]
+    public required string Uid { get; init; }
+
+    public DateTime CreatedAt { get; init; }
+    public DateTime UpdatedAt { get; init; }
+    public DateTime UsedAt { get; init; }
+}
Index: GrpcService/Services/RemindTemplateService.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/GrpcService/Services/RemindTemplateService.cs b/GrpcService/Services/RemindTemplateService.cs
new file mode 100644
--- /dev/null	(date 1723603040474)
+++ b/GrpcService/Services/RemindTemplateService.cs	(date 1723603040474)
@@ -0,0 +1,41 @@
+using Grpc.Core;
+using GrpcService.Extensions;
+using GrpcService.Models.RemindTemplate;
+using Microsoft.AspNetCore.Authorization;
+using RemindTemplate.V1;
+
+namespace GrpcService.Services;
+
+public class RemindTemplateService(AppDbContext dbContext, ILogger<RemindTemplateService> logger)
+    : RemindTemplate.V1.RemindTemplateService.RemindTemplateServiceBase
+{
+    [Authorize]
+    public override async Task<CreateRemindTemplateResponse> CreateRemindTemplate(CreateRemindTemplateRequest request,
+        ServerCallContext context)
+    {
+        var authUser = context.GetAuthUser();
+        if (request.Uid != authUser.Uid)
+            throw new RpcException(new Status(StatusCode.PermissionDenied, "Permission denied"));
+
+        var remindTemplate = new RemindTemplateModel
+        {
+            Title = request.Title,
+            Description = request.Description,
+            Uid = request.Uid
+        };
+        await dbContext.RemindTemplates.AddAsync(remindTemplate);
+        await dbContext.SaveChangesAsync();
+
+        return new CreateRemindTemplateResponse
+        {
+            RemindTemplate = new RemindTemplate.V1.RemindTemplate
+            {
+                Id = remindTemplate.Id.ToString(),
+                Title = remindTemplate.Title,
+                Description = remindTemplate.Description,
+                Uid = remindTemplate.Uid
+            }
+        };
+    }
+
+}
